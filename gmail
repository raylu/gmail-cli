#!/usr/bin/env python3

import base64
import logging

from curtsies import FSArray, FullscreenWindow, Input
import curtsies.events

from api import API, authorize
import db

logging.getLogger('curtsies').setLevel(logging.ERROR)

class Box:
	def __init__(self, fsa, y1, y2, x1, x2):
		self.fsarray = fsa
		self.y1, self.y2, self.x1, self.x2 = y1, y2, x1, x2
		self.height = y2 - y1
		self.width = x2 - x1
		self.list = []
		self.top = 0

	def add_line(self, text):
		self.list.append(text[:self.width])

	def scroll(self, n):
		max_top = max(len(self.list) - self.height, 0)
		self.top = min(max(self.top + n, 0), max_top)

	def render(self):
		fsa = FSArray(self.height, self.width)
		for i, line in enumerate(self.list[self.top : self.top+self.height]):
			fsa[i, :] = [line]
		self.fsarray[self.y1:self.y2, self.x1:self.x2] = fsa

class Account:
	def __init__(self, api):
		self.api = api
		self.labels = None
		self.messages = None

	def get_messages(self):
		self.messages = self.parse_headers(db.get_messages())
		if not self.messages:
			self.update_messages()

	def update_labels(self):
		labels = self.api.get('labels')['labels']
		parsed_labels = {}
		for label in labels:
			unread = label.get('threadsUnread') or label.get('messagesUnread', 0)

			message_list_visibility = label.get('messageListVisibility', 'show')
			if message_list_visibility == 'show':
				message_list_visibility = 1
			elif message_list_visibility == 'hide':
				message_list_visibility = 0
			else:
				raise Exception(message_list_visibility)

			label_list_visibility = label.get('labelListVisibility', 'labelShow')
			if label_list_visibility == 'labelShow':
				label_list_visibility = 1
			elif label_list_visibility == 'labelShowIfUnread' and unread:
				label_list_visibility = 1
			elif label_list_visibility == 'labelHide':
				label_list_visibility = 0

			parsed_labels[label['id']] = {
				'name': label['name'],
				'message_list_visibility': message_list_visibility,
				'label_list_visibility': label_list_visibility,
				'unread': unread,
			}
		self.labels = parsed_labels
		db.update_labels(parsed_labels)

	def update_messages(self):
		messages = self.api.get('messages', label_ids='INBOX')
		parsed_messages = {}
		for message in messages['messages']:
			m = self.api.get('messages', message['id'])
			headers = []
			for header in m['payload']['headers']:
				headers.append('%s: %s' % (header['name'], header['value']))
			body = self.get_body(m['payload'])
			if not body:
				body = m['snippet']
			parsed_messages[m['id']] = {
				'history_id': m['historyId'],
				'thread_id': m['threadId'],
				'headers': '\n'.join(headers),
				'body': body,
				'labels': m['labelIds'],
			}
		self.messages = self.parse_headers(parsed_messages)
		db.update_messages(parsed_messages)

	def get_body(self, payload):
		if payload.get('mimeType') == 'text/plain':
			return base64.urlsafe_b64decode(payload['body']['data'])
		for part in payload.get('parts', []):
			body = self.get_body(part)
			if body:
				return body

	def parse_headers(self, messages):
		interested_headers = ['To', 'From', 'Subject']
		for message in messages.values():
			headers = message['headers'].split('\n')
			for header in headers:
				for ih in interested_headers:
					if header.startswith(ih + ': '):
						message[ih.lower()] = header[len(ih)+2:]
						break
		return messages

def main():
	credentials = authorize()
	api = API(credentials['access_token'], credentials['refresh_token'])
	account = Account(api)
	account.update_labels()

	with Input(sigint_event=True) as keys, FullscreenWindow() as win:
		fsa = FSArray(win.height, win.width)

		label_box = Box(fsa, 1, win.height-2, 1, 20)
		for label_id, label in account.labels.items():
			if label['label_list_visibility']:
				label_box.add_line(label['name'])
		label_box.render()

		mail_box = Box(fsa, 1, win.height-2, 22, win.width-1)
		mail_box.render()

		win.render_to_terminal(fsa)
		for k in keys:
			if isinstance(k, curtsies.events.SigIntEvent) or k == 'q':
				break
			elif k == '<Ctrl-n>':
				label_box.scroll(1)
			elif k == '<Ctrl-p>':
				label_box.scroll(-1)
			elif k == 'j':
				mail_box.scroll(1)
			elif k == 'k':
				mail_box.scroll(-1)
			elif k == '<SPACE>':
				account.get_messages()
				for message in account.messages.values():
					mail_box.add_line(message['from'].ljust(19) + ' ' + message['subject'])

			label_box.render()
			mail_box.render()
			win.render_to_terminal(fsa)

main()
